<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在linux上搭建svn服务器</title>
      <link href="/2023/03/21/%E5%9C%A8linux%E4%B8%8A%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/03/21/%E5%9C%A8linux%E4%B8%8A%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>将部署在windows上的svn服务器迁移到linux</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><code>linux服务器安装svn</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install subversion</span><br></pre></td></tr></table></figure><p><code>windows导出dump文件</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin dump 项目地址 &gt; 项目名.dump</span><br></pre></td></tr></table></figure><p><code>linux创建版本库</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create /var/svn/test</span><br></pre></td></tr></table></figure><p><code>linux导入dump文件</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin load /svndata/项目名 &lt; 项目名.dump</span><br></pre></td></tr></table></figure><h4 id="配置文件对照表"><a href="#配置文件对照表" class="headerlink" title="配置文件对照表"></a>配置文件对照表</h4><table><thead><tr><th>文件名</th><th>功能</th><th>windows</th><th>linux</th></tr></thead><tbody><tr><td>svnserve.conf</td><td>svn服务配置</td><td>svnserve.conf</td><td>svnserve.conf</td></tr><tr><td>authz</td><td>账号权限管理</td><td>VisualSVN-SvnAuthz.ini</td><td>authz</td></tr><tr><td>passwd</td><td>密码配置文件</td><td>htpasswd</td><td>passwd</td></tr><tr><td>根目录authz</td><td>所有库账号公共权限管理</td><td>VisualSVN-GlobalWinAuthz.ini</td><td>根目录authz</td></tr><tr><td>groups.conf</td><td>svn用户群组信息</td><td>groups.conf</td><td>根目录authz</td></tr></tbody></table><h4 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4><p><code>svnserve.conf</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anon<span class="literal">-access</span> = none （none匿名不可访问）</span><br><span class="line">auth<span class="literal">-access</span> = <span class="built_in">write</span></span><br><span class="line">password<span class="literal">-db</span> = /var/svn/passwd (修改为根目录的passwd)</span><br><span class="line">authz<span class="literal">-db</span> = /var/svn/authz (修改为根目录的authz)</span><br></pre></td></tr></table></figure><p><code>authz</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">groups</span>]</span><br><span class="line">dev = dayi123,dayi</span><br><span class="line"></span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line">[/]</span><br><span class="line"><span class="comment"># linux (需要带根目录下的项目名)</span></span><br><span class="line">[<span class="type">test</span>:/]</span><br><span class="line">test= rw</span><br></pre></td></tr></table></figure><h4 id="httpd支持"><a href="#httpd支持" class="headerlink" title="httpd支持"></a>httpd支持</h4><p>为了能通过web访问，以及兼容windows visualsvn的htpasswd，需要使用httpd服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载httpd和mod_dav_svn模块</span></span><br><span class="line">yum install <span class="literal">-y</span> mod_dav_svn</span><br><span class="line">yum install <span class="literal">-y</span> httpd</span><br></pre></td></tr></table></figure><p><code>增加httpd的svn配置</code><br>vim /etc/httpd/conf.d/svn.conf</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;Location /svn&gt;</span><br><span class="line"><span class="comment">#开启svn</span></span><br><span class="line">   DAV svn</span><br><span class="line"><span class="comment">#指定父目录位置，以后所有版本库都将存放在该目录下</span></span><br><span class="line">   SVNParentPath /var/svn/</span><br><span class="line"><span class="comment">#开启svn版本库父目录功能</span></span><br><span class="line">   SVNListParentPath On</span><br><span class="line"><span class="comment">#指定授权模式</span></span><br><span class="line">   AuthType Basic</span><br><span class="line"><span class="comment">#登陆窗口标题显示提示文字</span></span><br><span class="line">   AuthName <span class="string">&quot;Authorization Realm&quot;</span></span><br><span class="line"><span class="comment">#指定访问版本库的账户和密码存放文件，该文件需要用apache的htpasswd命令创建</span></span><br><span class="line">   AuthUserFile /var/svn/htpasswd</span><br><span class="line"><span class="comment">#指定访问版本库的用户和组的权限控制文件</span></span><br><span class="line">   AuthzSVNAccessFile /var/svn/authz</span><br><span class="line"><span class="comment">#要求验证有效的用户才能访问</span></span><br><span class="line">   Require valid<span class="literal">-user</span></span><br><span class="line">&lt;/Location&gt;</span><br></pre></td></tr></table></figure><p><code>开启httpd服务</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable httpd</span><br><span class="line">systemctl <span class="built_in">start</span> httpd</span><br></pre></td></tr></table></figure><p>如果不想使用httpd的默认端口80或者该端口被占用，则可以修改<code>/etc/httpd/conf/httpd.conf</code>中的默认端口</p><p><code>兼容windows的htpasswd</code><br>首先查看htpasswd文件中密码的格式<br><strong>test:$apr1$uer$1txKFt7mXE/EV1ouN4xWK1</strong></p><p>对比httpd官网给的几种加密方式：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bcrypt</span><br><span class="line"><span class="variable">$</span> htpasswd <span class="literal">-nbB</span> myName myPassword</span><br><span class="line">myName:<span class="variable">$2y</span><span class="variable">$05</span><span class="variable">$c4WoMPo3SXsafkva</span>.HHa6uXQZWr7oboPiC2bT/r7q1BB8I2s0BRqC</span><br><span class="line"></span><br><span class="line">MD5</span><br><span class="line"><span class="variable">$</span> htpasswd <span class="literal">-nbm</span> myName myPassword</span><br><span class="line">myName:<span class="variable">$apr1</span><span class="variable">$r31</span>.....<span class="variable">$HqJZimcKQFAMYayBlzkrA</span>/</span><br><span class="line"></span><br><span class="line">SHA1</span><br><span class="line"><span class="variable">$</span> htpasswd <span class="literal">-nbs</span> myName myPassword</span><br><span class="line">myName:&#123;SHA&#125;VBPuJHI7uixaa6LQGWx4s+<span class="number">5</span>GKNE=</span><br><span class="line"></span><br><span class="line">CRYPT</span><br><span class="line"><span class="variable">$</span> htpasswd <span class="literal">-nbd</span> myName myPassword</span><br><span class="line">myName:rqXexS6ZhobKA</span><br></pre></td></tr></table></figure><p>可以看出使用的是MD5加密</p><p><code>使用htpasswd增加新用户</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htpasswd <span class="literal">-nbm</span> myName myPassword</span><br><span class="line">=&gt; myName:<span class="variable">$apr1</span><span class="variable">$i</span>/YRWA8N<span class="variable">$sHsoGDljceyyIj5KTQJw</span>/.</span><br></pre></td></tr></table></figure><p>将其拷贝到httpd文件中，测试能否登陆svn即可</p><h4 id="启动svn服务"><a href="#启动svn服务" class="headerlink" title="启动svn服务"></a>启动svn服务</h4><p><code>基本命令</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svnserve <span class="literal">-d</span> <span class="literal">-r</span> /var/svn/</span><br><span class="line">killall svnserve</span><br></pre></td></tr></table></figure><p><code>设置为systemctrl服务</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=svn<span class="literal">-server</span></span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line"><span class="built_in">Type</span>=forking</span><br><span class="line">ExecStart=/usr/bin/svnserve <span class="literal">-d</span> <span class="literal">-r</span> /var/svn</span><br><span class="line">ExecStop=/usr/bin/killall svnserve </span><br><span class="line">PrivateTmp=true</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=<span class="number">1</span>min</span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure><p>systemctl daemon-reload<br>systemctl enable svn<br>systemctl start svn</p><h4 id="更换svn库地址"><a href="#更换svn库地址" class="headerlink" title="更换svn库地址"></a>更换svn库地址</h4><p>右键=》TortoiseSVN=》重新定位</p><h4 id="其它一些功能"><a href="#其它一些功能" class="headerlink" title="其它一些功能"></a>其它一些功能</h4><p><code>添加提交时强制写日志功能</code><br>首先拷贝hooks下面的pre-commit.tmpl为pre-commit（windows下为’pre-commit.bat’ or ‘pre-commit.exe’） 并增加执行权限<br>chmod -R u+x,g+x,o+x hooks</p><p>代码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">REPOS=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">TXN=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure that the log message contains some text.</span></span><br><span class="line">SVNLOOK=/usr/bin/svnlook</span><br><span class="line">LOGMSG=<span class="variable">$</span>(<span class="variable">$SVNLOOK</span> log <span class="literal">-t</span> <span class="string">&quot;<span class="variable">$TXN</span>&quot;</span> <span class="string">&quot;<span class="variable">$REPOS</span>&quot;</span> | grep <span class="string">&quot;[a-zA-Z0-9]&quot;</span> | wc <span class="literal">-c</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$LOGMSG</span>&quot;</span> -<span class="type">lt</span> <span class="number">10</span> ]; then</span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\n Log message can&#x27;t be empty! you must input change log. &quot;</span> <span class="number">1</span>&gt;&amp;<span class="number">2</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/df42f7ca4abd4b92a665111922c8cae2.png" alt="在这里插入图片描述"></p><p><code>增加备份功能</code><br><strong>全量备份</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># svn全量备份脚本</span><br><span class="line"></span><br><span class="line">DATE=$(date +%Y%m%d:%H:%M:%S)       #定义时间变量，用于文件名后缀</span><br><span class="line">SVN_DIR=/var/svn                    #定义SVN库目录</span><br><span class="line">SVN_BAK_DIR=/var/svndumpBak         #定义备份文件存放目录</span><br><span class="line"></span><br><span class="line"># 备份库列表</span><br><span class="line">bakList=(test1 test2)</span><br><span class="line"></span><br><span class="line"># 保留日志份数</span><br><span class="line">keep_log_num=1</span><br><span class="line"></span><br><span class="line">for rep in $&#123;bakList[@]&#125;</span><br><span class="line">do</span><br><span class="line"># 定义各个项目的初始版本号文件</span><br><span class="line">svn_dir=$SVN_DIR/$rep</span><br><span class="line">svn_bak_dir=$SVN_BAK_DIR/full_log/$rep</span><br><span class="line">if [[ ! -d $svn_bak_dir ]]</span><br><span class="line">        then</span><br><span class="line">mkdir -p $svn_bak_dir                </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#开始备份</span><br><span class="line">svnadmin dump $svn_dir &gt; $svn_bak_dir/$&#123;rep&#125;_$DATE.dump</span><br><span class="line">if [ $? -eq 0 ];</span><br><span class="line">    then</span><br><span class="line">    echo &quot;backup success....&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;backup fail....&quot;</span><br><span class="line">continue</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd $svn_bak_dir</span><br><span class="line">#清理过期备份</span><br><span class="line">num=`expr $keep_log_num + 1`</span><br><span class="line">ls -t | tail -n +$num | xargs rm -rf</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>增量备份</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># svn增量备份脚本</span><br><span class="line"></span><br><span class="line">DATE=$(date +%Y%m%d:%H:%M:%S)       #定义时间变量，用于文件名后缀</span><br><span class="line">SVN_DIR=/var/svn                    #定义SVN库目录</span><br><span class="line">SVN_BAK_DIR=/var/svndumpBak         #定义备份文件存放目录</span><br><span class="line"></span><br><span class="line"># 备份库列表</span><br><span class="line">bakList=(test1 test2)</span><br><span class="line"></span><br><span class="line"># 保留日志份数</span><br><span class="line">keep_log_num=7</span><br><span class="line"></span><br><span class="line">for rep in $&#123;bakList[@]&#125;</span><br><span class="line">do</span><br><span class="line"># 定义各个项目的初始版本号文件</span><br><span class="line">svn_dir=$SVN_DIR/$rep</span><br><span class="line">svn_file=$svn_dir/conf/svn_ver_id</span><br><span class="line">svn_bak_dir=$SVN_BAK_DIR/incr_log/$rep</span><br><span class="line"></span><br><span class="line">if [[ ! -e $svn_file ]]</span><br><span class="line">then</span><br><span class="line">touch $svn_file</span><br><span class="line">echo &#x27;0&#x27; &gt; $svn_file</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">        if [[ ! -d $svn_bak_dir ]]</span><br><span class="line">        then</span><br><span class="line">mkdir -p $svn_bak_dir                </span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">    NUM0=$(cat $svn_file)</span><br><span class="line">    NUM1=`expr $NUM0 + 1`</span><br><span class="line">NUM2=$(svnlook youngest $svn_dir)</span><br><span class="line"></span><br><span class="line">#没有新增跳过</span><br><span class="line">if [[ NUM1 -eq NUM2 ]]</span><br><span class="line">then</span><br><span class="line">continue</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#开始备份</span><br><span class="line">svnadmin dump $svn_dir -r $NUM1:$NUM2 --incremental &gt; $svn_bak_dir/$&#123;rep&#125;_$&#123;NUM1&#125;_$&#123;NUM2&#125;_$DATE.dump</span><br><span class="line"></span><br><span class="line">#判断备份是否成功，若成功，则记录当前最新的版本号到临时文件中，用于下次增量备份使用</span><br><span class="line">if [ $? -eq 0 ];</span><br><span class="line">    then</span><br><span class="line">    echo $NUM2 &gt; $svn_file</span><br><span class="line">else</span><br><span class="line">    echo &quot;backup fail....&quot;</span><br><span class="line">continue</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#清理过期备份</span><br><span class="line">cd $svn_bak_dir</span><br><span class="line">num=`expr $keep_log_num + 1`</span><br><span class="line">ls -t | tail -n +$num | xargs rm -rf</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h4><p><code>svn could not begin a transaction svn 提交文件报错</code><br><img src="https://img-blog.csdnimg.cn/38addb1bf8254fbf808fc54b5204c20a.png" alt="在这里插入图片描述"><br>原因是在svn服务器上创建仓库时使用了root身份登录服务器, 导致文件没有足够的写权限, 需更改仓库的组权限<br>chown -R apache:apache /var/svn</p><p><code>[Error output could not be translated from the native locale to UTF-8.] hooks里面有中文报错</code><br><img src="https://img-blog.csdnimg.cn/e13086f5b3bc4908badd536f8c335bed.png" alt="在这里插入图片描述"></p><p>经过查询是1.8之后才会解决的一个bug，可以升级到1.8以上的版本测试下下面的方法<br>vim /etc/httpd/conf/httpd.conf</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_dav_fs.c&gt;</span><br><span class="line"><span class="comment"># Location of the WebDAV lock database.</span></span><br><span class="line">DAVLockDB /var/lib/dav/lockdb</span><br><span class="line">SVNUseUTF8 On</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>重启httpd</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/lgh344902118/p/16348164.html">svn 从windows迁移到linux 记录 </a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-manager服务学习</title>
      <link href="/2023/03/13/Network-manager%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/13/Network-manager%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>NetworkManager 是一个为系统提供检测和配置功能以便自动连接到网络的程序。包含一个守护程序、一个命令行界面（nmcli）和一个基于 curses 的界面（nmtui）。</p><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt<span class="literal">-get</span> install NetworkManager</span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install NetworkManager</span><br></pre></td></tr></table></figure><h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status network<span class="literal">-manager</span>.service</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">start</span> network<span class="literal">-manager</span>.service</span><br></pre></td></tr></table></figure><h3 id="nmcli命令行"><a href="#nmcli命令行" class="headerlink" title="nmcli命令行"></a>nmcli命令行</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有网络连接</span></span><br><span class="line"><span class="comment"># 长格式</span></span><br><span class="line">nmcli connection show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 短格式，缩写</span></span><br><span class="line">nmcli con show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看活动的网络连接</span></span><br><span class="line">nmcli con show <span class="literal">-active</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定网卡的详细信息</span></span><br><span class="line">nmcli con show eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示设备的连接状态</span></span><br><span class="line">nmcli status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有设备网络设备详情信息</span></span><br><span class="line">nmcli device show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定网络设备的详细信息</span></span><br><span class="line">nmcli device show eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用网络连接</span></span><br><span class="line">nmcli con up eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停用网络连接（可以被自动激活）</span></span><br><span class="line">nmcli con down eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用网卡，防止自动被激活</span></span><br><span class="line">nmcli device disconnect eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除网络连接的配置文件</span></span><br><span class="line">nmcli con delete eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载网络配置文件</span></span><br><span class="line">nmcli con reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置网卡自启动，实际修改的是网卡配置文件 ONBOOT=yes</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> connection.autoconnect yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改IP地址是静态（manual）还是dhcp动态（auto）</span></span><br><span class="line"><span class="comment"># 实际修改的是网卡配置文件BOOTPROTO，BOOTPROTO=none 表示静态；BOOTPROTO=dhcp 表示动态</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> ipv4.method manual(<span class="keyword">static</span>) | auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改IP配置及网关</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> ipv4.addresses “<span class="number">10.10</span>.<span class="number">10.10</span>/<span class="number">24</span> <span class="number">10.10</span>.<span class="number">10.1</span>”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认网关</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> ipv4.gateway <span class="number">10.10</span>.<span class="number">10.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加第二个IP地址</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> +ipv4.addresses <span class="number">10.10</span>.<span class="number">10.10</span>/<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除第二个IP地址</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> <span class="literal">-ipv4</span>.addresses <span class="number">10.10</span>.<span class="number">10.10</span>/<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加dns1</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> ipv4.dns <span class="number">114.114</span>.<span class="number">114.114</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加dns2</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> +ipv4.dns <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次添加多个dns</span></span><br><span class="line">nmcli con mod CON<span class="literal">-NAME</span> ipv4.dns <span class="number">114.114</span>.<span class="number">114.114</span>,<span class="number">8.8</span>.<span class="number">8.8</span>,<span class="number">8.8</span>.<span class="number">4.4</span></span><br></pre></td></tr></table></figure><h3 id="nmtui图形化界面"><a href="#nmtui图形化界面" class="headerlink" title="nmtui图形化界面"></a>nmtui图形化界面</h3>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs的ip模块的应用</title>
      <link href="/2023/03/10/nodejs%E7%9A%84ip%E6%A8%A1%E5%9D%97%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2023/03/10/nodejs%E7%9A%84ip%E6%A8%A1%E5%9D%97%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><blockquote><p>//npm<br>npm install ip<br>// npm readme<br><a href="https://www.npmjs.com/package/ip">https://www.npmjs.com/package/ip</a><br>// github<br>git clone <a href="https://github.com/indutny/node-ip.git">https://github.com/indutny/node-ip.git</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ip = <span class="built_in">require</span>(<span class="string">&#x27;ip&#x27;</span>);</span><br><span class="line">ip.address() <span class="comment">// my ip address</span></span><br><span class="line">ip.isPrivate(<span class="string">&#x27;127.0.0.1&#x27;</span>) <span class="comment">// Check whether an IP is within a private IP address range.</span></span><br><span class="line">ip.isV4Format(<span class="string">&#x27;127.0.0.1&#x27;</span>); <span class="comment">// Check whether an IP is a IPv4 address.</span></span><br><span class="line">ip.isV6Format(<span class="string">&#x27;::ffff:127.0.0.1&#x27;</span>); <span class="comment">// Check whether an IP is a IPv6 address.</span></span><br></pre></td></tr></table></figure><h3 id="address"><a href="#address" class="headerlink" title="address"></a>address</h3><blockquote><p>//npm<br>npm install address<br>// npm readme<br><a href="https://www.npmjs.com/package/address">https://www.npmjs.com/package/address</a><br>// github<br>git clone <a href="https://github.com/node-modules/address">https://github.com/node-modules/address</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> address = <span class="built_in">require</span>(<span class="string">&#x27;address&#x27;</span>);</span><br><span class="line">address.ip();   <span class="comment">// 192.168.0.125</span></span><br><span class="line">address.ipv6();   <span class="comment">// 192.168.0.125</span></span><br><span class="line"><span class="comment">// 获取默认mac地址</span></span><br><span class="line">address.mac(<span class="function"><span class="keyword">function</span> (<span class="params">err, addr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(addr); <span class="comment">// &#x27;78:ca:39:b0:e6:7d&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定网卡获取mac地址</span></span><br><span class="line">address.mac(<span class="string">&#x27;enp1s0&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, addr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(addr); <span class="comment">// &#x27;0a:00:27:00:00:00&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dns是通过读取/etc/resolv.conf获取的，建议用nmcli获取</span></span><br><span class="line">address.dns(<span class="function">(<span class="params">err, addrs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(addrs);</span><br><span class="line">  <span class="comment">// [&#x27;10.13.2.1&#x27;, &#x27;10.13.2.6&#x27;]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">address(<span class="function">(<span class="params">err, addrs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(addrs.ip, addrs.ipv6, addrs.mac);</span><br><span class="line">  <span class="comment">// &#x27;192.168.0.2&#x27;, &#x27;fe80::7aca:39ff:feb0:e67d&#x27;, &#x27;78:ca:39:b0:e6:7d&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">address(<span class="string">&#x27;enp1s0&#x27;</span>, <span class="function">(<span class="params">err, addrs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(addrs.ip, addrs.ipv6, addrs.mac);</span><br><span class="line">  <span class="comment">// &#x27;192.168.56.1&#x27;, null, &#x27;0a:00:27:00:00:00&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">address.interface(<span class="string">&#x27;IPv4&#x27;</span>, <span class="string">&#x27;eth1&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123; address: &#x27;192.168.1.1&#x27;, family: &#x27;IPv4&#x27;, mac: &#x27;78:ca:39:b0:e6:7d&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="netmask"><a href="#netmask" class="headerlink" title="netmask"></a>netmask</h3><blockquote><p>//npm<br>npm install netmask<br>// npm readme<br><a href="https://www.npmjs.com/package/netmask">https://www.npmjs.com/package/netmask</a><br>// github<br>git clone <a href="https://github.com/rs/node-netmask">https://github.com/rs/node-netmask</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Netmask = <span class="built_in">require</span>(<span class="string">&#x27;netmask&#x27;</span>).Netmask</span><br><span class="line"><span class="keyword">var</span> block = <span class="keyword">new</span> Netmask(<span class="string">&#x27;10.0.0.0/12&#x27;</span>);</span><br><span class="line">block.base;                     <span class="comment">// 10.0.0.0</span></span><br><span class="line">block.mask;                     <span class="comment">// 255.240.0.0</span></span><br><span class="line">block.bitmask;                  <span class="comment">// 12</span></span><br><span class="line">block.hostmask;                 <span class="comment">// 0.15.255.255</span></span><br><span class="line">block.broadcast;                <span class="comment">// 10.15.255.255</span></span><br><span class="line">block.size;                     <span class="comment">// 1048576</span></span><br><span class="line">block.first;                    <span class="comment">// 10.0.0.1</span></span><br><span class="line">block.last;                     <span class="comment">// 10.15.255.254</span></span><br><span class="line"></span><br><span class="line">block.contains(<span class="string">&#x27;10.0.8.10&#x27;</span>);    <span class="comment">// true</span></span><br><span class="line">block.contains(<span class="string">&#x27;10.8.0.10&#x27;</span>);    <span class="comment">// true</span></span><br><span class="line">block.contains(<span class="string">&#x27;192.168.1.20&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">block.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ip, long, index</span>))</span>;</span><br><span class="line"></span><br><span class="line">block.next()                    <span class="comment">// Netmask(&#x27;10.16.0.0/12&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="ipaddr-js"><a href="#ipaddr-js" class="headerlink" title="ipaddr.js"></a>ipaddr.js</h3><blockquote><p>//npm<br>npm install ipaddr.js<br>// npm readme<br><a href="https://www.npmjs.com/package/ipaddr.js">https://www.npmjs.com/package/ipaddr.js</a><br>// github<br>git clone <a href="https://github.com/whitequark/ipaddr.js">https://github.com/whitequark/ipaddr.js</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以用来校验和格式化</span></span><br><span class="line"><span class="keyword">let</span> ipaddr = <span class="built_in">require</span>(<span class="string">&#x27;ipaddr.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以获取掩码的bitmask 也可以校验掩码格式</span></span><br><span class="line">ipaddr.IPv4.parse(<span class="string">&#x27;255.255.255.240&#x27;</span>).prefixLengthFromSubnetMask() == <span class="number">28</span></span><br><span class="line">ipaddr.IPv4.parse(<span class="string">&#x27;255.192.164.0&#x27;</span>).prefixLengthFromSubnetMask()  == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bitmask转掩码</span></span><br><span class="line">ipaddr.IPv4.subnetMaskFromPrefixLength(<span class="number">24</span>) == <span class="string">&#x27;255.255.255.0&#x27;</span></span><br><span class="line">ipaddr.IPv4.subnetMaskFromPrefixLength(<span class="number">29</span>) == <span class="string">&#x27;255.255.255.248&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或运算学习</title>
      <link href="/2023/03/03/%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/03/%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js实现tcp服务器和客户端</title>
      <link href="/2023/03/01/node-js%E5%AE%9E%E7%8E%B0tcp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2023/03/01/node-js%E5%AE%9E%E7%8E%B0tcp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="引入net模块"><a href="#引入net模块" class="headerlink" title="引入net模块"></a>引入net模块</h3><blockquote><p>net 模块提供了异步的网络 API，用于创建基于流的 TCP 或 IPC 服务器 (net.createServer()) 和客户端 (net.createConnection())。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> server = net.createServer(<span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">    socket.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;server recv data:&#x27;</span>, data);</span><br><span class="line">    &#125;)</span><br><span class="line">    socket.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">hadError</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`sock close hadError: &quot;<span class="subst">$&#123;hadError&#125;</span>&quot;`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    socket.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sock end&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    socket.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sock err:&#x27;</span>, err);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 设置最大连接数</span></span><br><span class="line">    server.maxConnections = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 获取连接数</span></span><br><span class="line">    server.getConnections(<span class="function">(<span class="params">err, count</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;server count:&#x27;</span>, count);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">10033</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server is running on 10033&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">server.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server err:&quot;</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line">server.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;server closed&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> client = net.Socket();</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">client.connect(<span class="number">10033</span>, host, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;connect the server&#x27;</span>);</span><br><span class="line">  client.write(<span class="string">&#x27;send first data&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;client data:&#x27;</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;client end&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`client error: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加法机的实现</title>
      <link href="/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="逻辑门"><a href="#逻辑门" class="headerlink" title="逻辑门"></a>逻辑门</h3><p>在实现加法机前需要先了解逻辑门<br>最基础的3个逻辑门：与(AND)、或(OR)、非 (NOT，也可以叫反相器)<br><code>真值表</code><br><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E7%9C%9F%E5%80%BC%E8%A1%A8.png" alt="真值表.png"></p><p><code>逻辑门的画法</code><br><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E9%80%BB%E8%BE%91%E9%97%A8.png" alt="逻辑门.png"></p><p><code>异或(XOR)的实现</code><br>异或门可以用基本的逻辑门来实现，非门可以用圆圈加在其它门的输入或者输出位置直接取反。<br><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E5%BC%82%E6%88%96%E9%97%A8.png" alt="异或门.png"></p><p>简化：<br><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E9%80%BB%E8%BE%91%E9%97%A81.png" alt="逻辑门1.png"></p><h3 id="半加器"><a href="#半加器" class="headerlink" title="半加器"></a>半加器</h3><blockquote><p>半加器电路是指对两个输入数据位相加，输出一个结果位和进位，没有进位输入的加法器电路。 是实现两个一位二进制数的加法运算电路。</p></blockquote><p><code>半加器真值表</code><br><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E5%8D%8A%E5%8A%A0%E5%99%A8%E7%9C%9F%E5%80%BC%E8%A1%A8.png" alt="半加器真值表.png"></p><p><strong>也就是进位与和位分别输出</strong><br><code>和位</code>:二进制的和位规则和<strong>异或门</strong>一致，也就是相同为0，不同为1<br><code>进位</code>:进位规则则是两个输入都为真(1)就为1，其余为0，这和<strong>与门</strong>一致</p><p><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E5%8D%8A%E5%8A%A0%E5%99%A8%E7%AE%80%E7%95%A5%E5%9B%BE.png" alt="半加器简略图.png"><br><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E5%8D%8A%E5%8A%A0%E5%99%A8.png" alt="半加器.png"></p><h3 id="加法机"><a href="#加法机" class="headerlink" title="加法机"></a>加法机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  1111</span><br><span class="line">+ 1111</span><br><span class="line">——————————</span><br><span class="line"> 11110</span><br></pre></td></tr></table></figure><p>以上面的4位2进制数为例。直接看第二位的结果，为1 + 1 的和位 再加上第一位的进位 1，所以结果为1，<br>因此第一位可以看成 1 + 1 的和位加上进位 0.</p><p><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E5%85%A8%E5%8A%A0%E5%99%A8.png" alt="全加器.png"><br><img src="http://yuxiang.work/2023/03/01/%E5%8A%A0%E6%B3%95%E6%9C%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/%E5%85%A8%E5%8A%A0%E5%99%A81.png" alt="全加器1.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.ruanyifeng.com/blog/2011/03/4-bit_computer.html">四位计算机的原理及其实现</a><br>编码的奥秘11、12章</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、反码、补码</title>
      <link href="/2023/02/27/%E6%BA%90%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/"/>
      <url>/2023/02/27/%E6%BA%90%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>原码(true form)是一种计算机中对数字的二进制定点表示方法。原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小。<br>例如，我们用8位二进制表示一个数，+11的原码为00001011，-11的原码就是10001011<br>一个 byte 有 8bit，最大值是 0 1 1 1 1 1 1 1 (+127)，最小值是 1 1 1 1 1 1 1 1 (-127)</p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>正数的反码是其本身（等于原码），负数的反码是符号位保持不变，其余位取反。 反码的存在是为了正确计算负数，因为原码不能用于计算负数.</p><p><code>计算负数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-8 - 1 = -9</span><br><span class="line"> 10001000</span><br><span class="line"> 转为反码</span><br><span class="line"> 11110111</span><br><span class="line">-00000001</span><br><span class="line">——————————</span><br><span class="line"> 11110110</span><br><span class="line"> 转为反码</span><br><span class="line"> 10001001 刚好就是-9</span><br></pre></td></tr></table></figure><p>也就是说整个计算过程为 ((-8)反码 - (1)原码)反码</p><p><code>跨零计算</code><br>负数跨零进行计算的话，计算结果不对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-8 + 9 = 1</span><br><span class="line"> 10001000</span><br><span class="line"> 转为反码</span><br><span class="line"> 11110111</span><br><span class="line">+00001001</span><br><span class="line">100000000</span><br><span class="line"> 去掉超过8位的位</span><br><span class="line"> 00000000</span><br><span class="line"> 转为反码</span><br><span class="line"> 11111111</span><br></pre></td></tr></table></figure><p>可以看到明显不对,这个时候就需要补码了</p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>正数的补码是其本身，负数的补码等于其反码 +1</p><p><code>跨零计算</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-8 + 9 = 1</span><br><span class="line"> 10001000</span><br><span class="line"> 转为反码</span><br><span class="line"> 11110111</span><br><span class="line"> 转为补码</span><br><span class="line"> 11111000</span><br><span class="line">+00001001</span><br><span class="line">100000001</span><br><span class="line"> 去掉超过8位的位</span><br><span class="line"> 00000001</span><br></pre></td></tr></table></figure><p>可以看到此时的值就是对的<br>总结下此时的计算过程 (-8)补 + (9)原</p><h3 id="模的概念"><a href="#模的概念" class="headerlink" title="模的概念"></a>模的概念</h3><p>看了上面的一些概念，肯定有人会疑问，为什么负数的补码是反码加1，其实理解了模的概念，这些反码和补码就很清楚了。</p><p><code>摘录自补码的百度百科</code></p><blockquote><p>“模”是指一个计量系统的计数范围，如过去计量粮食用的斗、时钟等。计算机也可以看成一个计量机器，因为计算机的字长是定长的，即存储和处理的位数是有限的，因此它也有一个计量范围，即都存在一个“模”。如：时钟的计量范围是0~11，模=12。表示n位的计算机计量范围是，模=．“模”实质上是计量器产生“溢出”的量，它的值在计量器上表示不出来，计量器上只能表示出模的余数。任何有模的计量器，均可化减法为加法运算。<br>就是取反后加1。<br>假设当前时针指向8点，而准确时间是6点，调整时间可有以下两种拨法：一种是倒拨2小时，即8-2=6；另一种是顺拨10小时，8+10=12+6=6，即8-2=8+10=8+12-2(mod 12)．在12为模的系统里，加10和减2效果是一样的，因此凡是减2运算，都可以用加10来代替。若用一般公式可表示为：a-b=a-b+mod=a+mod-b。对“模”而言，2和10互为补数。实际上，以12为模的系统中，11和1，8和4，9和3，7和5，6和6都有这个特性，共同的特点是两者相加等于模。对于计算机，其概念和方法完全一样。n位计算机，设n=8，所能表示的最大数是11111111，若再加1成100000000(9位)，但因只有8位，最高位1自然丢失（相当于丢失一个模）。又回到了 00000000，所以8位二进制系统的模为2的8次方。在这样的系统中减法问题也可以化成加法问题，只需把减数用相应的补数表示就可以了。把补数用到计算机对数的处理上，就是补码。</p></blockquote><p>回到上面 -8 + 9 = 1这个例子，用模的来理解（8位2进制数的模为128）就可以转换为 9 - 8 = 9 + 120 = 129<br>129 转为2进制表示即为 100000001，因为最多显示128，只有8位，所以最高的第9位去掉，即为00000001 = 1。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回车和换行的历史</title>
      <link href="/2023/02/27/%E5%9B%9E%E8%BD%A6%E5%92%8C%E6%8D%A2%E8%A1%8C%E7%9A%84%E5%8E%86%E5%8F%B2/"/>
      <url>/2023/02/27/%E5%9B%9E%E8%BD%A6%E5%92%8C%E6%8D%A2%E8%A1%8C%E7%9A%84%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="命名历史"><a href="#命名历史" class="headerlink" title="命名历史"></a>命名历史</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。</span><br><span class="line">但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。</span><br><span class="line">要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。</span><br><span class="line">于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做&quot;回车&quot;，告诉打字机把打印头定位在左边界；另一个叫做&quot;换行&quot;，告诉打字机把纸向下移一行。</span><br><span class="line">这就是&quot;换行&quot;和&quot;回车&quot;的来历，从它们的英语名字上也可以看出一二。</span><br><span class="line"></span><br><span class="line">&quot;回车&quot;（carriage return）和&quot;换行&quot;（line feed） 是来源机械英文打字机</span><br><span class="line">&quot;车&quot;指的是纸车,带着纸一起左右移动的模块.</span><br><span class="line">当开始打第一个字之前，要把纸车拉到最右边，上紧弹簧.随着打字，弹簧把纸车拉回去.每当打完一行后，纸车就完全收回去了.所以叫回车.</span><br><span class="line">换行的概念就是:打字机左边有个&quot;把手&quot;,往下扳动一下,纸会上移一行.</span><br></pre></td></tr></table></figure><h4 id="不同系统中的差异"><a href="#不同系统中的差异" class="headerlink" title="不同系统中的差异"></a>不同系统中的差异</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">后来，计算机发明了，这两个概念也就被般到了计算机上。</span><br><span class="line">那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。</span><br><span class="line">于是，就出现了分歧。</span><br><span class="line"></span><br><span class="line">Unix系统: \n</span><br><span class="line">Windows: \r\n</span><br><span class="line">Mac: \r</span><br></pre></td></tr></table></figure><p><a href="http://www.ruanyifeng.com/blog/2006/04/post_213.html">引用文章</a></p><h4 id="ChatGPT的回答"><a href="#ChatGPT的回答" class="headerlink" title="ChatGPT的回答"></a>ChatGPT的回答</h4><p><code>我：Why were carriage returns and line feeds created?</code></p><p><code>ChatGPT：</code>Carriage returns and line feeds were created as a means of controlling how text was displayed on early computer systems and printers.</p><p>In the early days of computing, text was typically printed on teletype machines, which used a combination of mechanical and electrical systems to print characters on paper. These machines used a roll of paper that was fed through the machine, with characters being printed on the paper one at a time.</p><p>To control the position of the printing head, teletype machines used two separate control codes: a carriage return (CR) and a line feed (LF).</p><p>A carriage return (CR) code instructs the machine to move the printing head all the way to the left margin of the paper. This was necessary because the printing head would typically be positioned at the right side of the paper after printing a line of text, so a carriage return was necessary to reset the position of the head.</p><p>A line feed (LF) code instructs the machine to move the paper up by one line, so that the next line of text can be printed. This was necessary because the paper on a teletype machine was fed vertically through the machine, so moving the paper up by one line was necessary to print on the next line.</p><p>Today, carriage returns and line feeds are still used in some contexts, such as in programming languages or when working with text files in certain operating systems. However, the way they are used has evolved over time and varies depending on the specific context.</p><p><code>我：Why is the carriage return or line feed at the end of the text different in different operating systems?</code></p><p><code>ChatGPT：</code>The reason why carriage return or line feed at the end of text is different in different operating systems is rooted in historical differences in how these operating systems handled text and line endings.</p><p>In Unix and Unix-like operating systems, such as Linux and macOS, a line feed (LF) character is used to mark the end of a line of text. This convention dates back to the early days of Unix, when it was developed as a text-based operating system. In Unix, files are stored as a sequence of lines, with each line terminated by a single LF character. This convention is also used in programming languages that were developed on Unix, such as C and its derivatives.</p><p>In contrast, in early versions of Microsoft Windows and MS-DOS, a carriage return (CR) followed by a line feed (LF) sequence is used to mark the end of a line of text. This convention goes back to the days of typewriters and teletype machines, which used both the CR and LF codes to signal the end of a line. When Microsoft developed its early operating systems, it inherited this convention.</p><p>The difference in line endings between Unix-like systems and Windows can cause issues when transferring files between systems. For example, if a text file created on a Windows machine is opened on a Unix system, the presence of the CR character may cause the lines to appear incorrectly. Similarly, if a text file created on a Unix system is opened on a Windows machine, the lack of the CR character may cause the lines to appear incorrectly.</p><p>To avoid these issues, many text editors and programming tools now have the ability to automatically convert line endings between Unix and Windows formats, or to handle both formats correctly.</p><p><code>我：Why is the end of the mac operating system a carriage return?</code></p><p><code>ChatGPT：</code>Historically, Mac OS (now known as macOS) used a carriage return (CR) character to mark the end of a line of text. This convention dates back to the early days of the Macintosh computer, which was first introduced in 1984.</p><p>The Macintosh was designed to be a user-friendly computer that was accessible to non-technical users, and part of this design philosophy was reflected in the way it handled text. The original Macintosh operating system, known as System 1, used a simple, intuitive interface for editing text, which involved using the return key to create new lines of text.</p><p>To achieve this behavior, the Macintosh operating system used a single CR character to mark the end of each line of text. This was a departure from the convention used in other operating systems of the time, such as Unix and MS-DOS, which used a combination of a CR and a line feed (LF) character to mark the end of a line.</p><p>The use of a single CR character on the Macintosh made it easier for users to create and edit text, since they could simply press the return key to start a new line. However, this convention also made it difficult to exchange text files with other operating systems, which may expect a different line ending convention.</p><p>Today, macOS still uses a single CR character as the default line ending convention for text files created on the system. However, most modern text editors and programming tools are able to handle multiple line ending conventions, including the use of both CR and LF characters, to ensure compatibility with other operating systems.</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机趣闻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/29/hello-world/"/>
      <url>/2022/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js之Data对象使用</title>
      <link href="/2022/02/08/js%E4%B9%8BData%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/02/08/js%E4%B9%8BData%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date对象是 JavaScript 原生的时间库。它以国际标准时间（UTC）1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）</span><br></pre></td></tr></table></figure><h2 id="普通函数用法"><a href="#普通函数用法" class="headerlink" title="普通函数用法"></a>普通函数用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个代表当前时间的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>()); <span class="comment">// Wed Feb 09 2022 15:38:52 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">// 即使带了参数也是返回当前时间, 参数个数没有影响</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)); <span class="comment">// Wed Feb 09 2022 15:40:11 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="构造函数用法"><a href="#构造函数用法" class="headerlink" title="构造函数用法"></a>构造函数用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前的UTC时间</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 2022-02-09T07:35:37.335Z</span></span><br><span class="line"><span class="comment">// 时间戳转为字符串格式</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>); <span class="comment">// 1970-01-01T00:00:00.000Z</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1644394635720</span>); <span class="comment">// 2022-02-09T08:17:15.720Z</span></span><br><span class="line"><span class="comment">// 时间戳为负数则代表1970之前的时间</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(-<span class="number">1644394635720</span>); <span class="comment">// 1917-11-22T15:42:44.280Z </span></span><br><span class="line"><span class="comment">// 当前时间转化为时间戳（单位：ms）</span></span><br><span class="line"><span class="keyword">let</span> now1 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 1644394635720</span></span><br><span class="line"><span class="comment">// 指定字符串格式的时间转换为时间戳</span></span><br><span class="line"><span class="keyword">let</span> now2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022-02-09T07:35:37.335Z&#x27;</span>).getTime(); <span class="comment">// 1644392137335</span></span><br></pre></td></tr></table></figure><p><strong>只要能被Date.parse()解析就可以当成字符串传入new Date()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2022-02-08T16:00:00.000Z</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022-2-9&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022/2/9&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2/9/2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022-FEB-9&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;FEB, 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;FEB 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;February, 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;February 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;9 Feb 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;9, February, 2022&#x27;</span>));</span><br></pre></td></tr></table></figure><p><strong>new Date()多个参数</strong></p><blockquote><p><code>new Date(year, month, date, hours, minutes, seconds, ms)</code><br>使用当前时区中的给定组件创建日期。只有<code>前两个参数是必须的</code>。<br>也就是说年和月是必须的，最少两个参数，否则被识别为时间戳了。<br>$ new Date(2022) // 1970-01-01T00:00:02.022Z<br>$ new Date(2022, 2) // 2022-02-28T16:00:00.000Z<br>year 必须是四位数：2013 是合法的，98 是不合法的。<br>month 计数从 0（一月）开始，到 11（十二月）结束。<br>date 是当月的具体某一天，如果缺失，则为默认值 1。<br>如果 hours/minutes/seconds/ms 缺失，则均为默认值 0。</p></blockquote><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p><strong>Date.parse()</strong></p><blockquote><p><code>Date.parse()</code>方法用来解析日期字符串，返回该时间距离时间零点（1970年1月1日 00:00:00）的毫秒数.<br>日期字符串应该符合 RFC 2822 和 ISO 8061 这两个标准，即<code>YYYY-MM-DDTHH:mm:ss.sssZ</code>格式，其中最后的Z表示时区。</p></blockquote><p><strong>Date.now()</strong></p><blockquote><p><code>Date.now</code>方法返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数，相当于 Unix 时间戳乘以1000。<br>$ console.log(Date.now()); // 1644399418450</p></blockquote><p><strong>Date.UTC()</strong></p><blockquote><p><code>Date.UTC</code>方法接受年、月、日等变量作为参数，返回该时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数。<br>// 格式<br>Date.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])<br>// 用法<br>Date.UTC(2011, 0, 1, 2, 3, 4, 567)<br>// 1293847384567</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-asset-image插件无法正确识别图片路径</title>
      <link href="/2022/01/26/Hexo-asset-image%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/"/>
      <url>/2022/01/26/Hexo-asset-image%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p><code>问题背景</code><br>路径后面会多一层域名的.work<br>比如域名为yuxiang.work,图片会被链接到下面的路径<br><img src="http://yuxiang.work/2022/01/26/Hexo-asset-image%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220126180401.png" alt="微信截图_20220126180401.png"></p><p><code>解决方案</code><br>修改插件的源码<code>index.js</code><br><img src="http://yuxiang.work/2022/01/26/Hexo-asset-image%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220126180652.png" alt="微信截图_20220126180652.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用总结</title>
      <link href="/2022/01/24/hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/24/hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><code>hexo安装</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line">hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><code>hexo部署</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成静态文章</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署文章</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><code>发布文章</code></p><p><strong>在发布之前了解下默认的3种布局(layout)</strong></p><table><thead><tr><th>布局</th><th>路径</th><th>含义</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td><td>发布</td></tr><tr><td>page</td><td>source</td><td>另起一页</td></tr><tr><td>draft</td><td>source/_drafts</td><td>草稿</td></tr></tbody></table><p><strong>可以修改3中布局模版达到定制效果</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布命令</span></span><br><span class="line">hexo new [<span class="type">layout</span>] &lt;title&gt;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3种发布命令</span></span><br><span class="line">hexo new page test</span><br><span class="line">hexo new draft test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用的是post的模版</span></span><br><span class="line">hexo new post test</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">hexo new test（新建文章 名test）</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#草稿预览：</span></span><br><span class="line">hexo server -<span class="literal">-draft</span></span><br><span class="line"><span class="comment">#草稿的发布：</span></span><br><span class="line">hexo publish draft test</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
