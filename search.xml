<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-asset-image插件无法正确识别图片路径</title>
    <url>/2022/01/26/Hexo-asset-image%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p><code>问题背景</code><br>路径后面会多一层域名的.work<br>比如域名为yuxiang.work,图片会被链接到下面的路径<br><img src="http://yuxiang.work/2022/01/26/Hexo-asset-image%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220126180401.png" alt="微信截图_20220126180401.png"></p>
<p><code>解决方案</code><br>修改插件的源码<code>index.js</code><br><img src="http://yuxiang.work/2022/01/26/Hexo-asset-image%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%AF%86%E5%88%AB%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220126180652.png" alt="微信截图_20220126180652.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用总结</title>
    <url>/2022/01/24/hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><code>hexo安装</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line">hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p><code>hexo部署</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成静态文章</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署文章</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p><code>发布文章</code></p>
<p><strong>在发布之前了解下默认的3种布局(layout)</strong></p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>source/_posts</td>
<td>发布</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
<td>另起一页</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
<td>草稿</td>
</tr>
</tbody></table>
<p><strong>可以修改3中布局模版达到定制效果</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发布命令</span></span><br><span class="line">hexo new [<span class="type">layout</span>] &lt;title&gt;</span><br></pre></td></tr></table></figure>


<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3种发布命令</span></span><br><span class="line">hexo new page test</span><br><span class="line">hexo new draft test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用的是post的模版</span></span><br><span class="line">hexo new post test</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">hexo new test</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#草稿预览：</span></span><br><span class="line">hexo server -<span class="literal">-draft</span></span><br><span class="line"><span class="comment">#草稿的发布：</span></span><br><span class="line">hexo publish draft test</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>冒险岛link表</title>
    <url>/2022/01/25/%E5%86%92%E9%99%A9%E5%B2%9Blink%E8%A1%A8/</url>
    <content><![CDATA[<p><img src="http://yuxiang.work/2022/01/25/%E5%86%92%E9%99%A9%E5%B2%9Blink%E8%A1%A8/%E8%81%8C%E4%B8%9A%E7%BE%A4%E5%88%97%E8%A1%A8%E5%9B%BE.JPG" alt="职业群列表图"></p>
<p><img src="http://yuxiang.work/2022/01/25/%E5%86%92%E9%99%A9%E5%B2%9Blink%E8%A1%A8/link.JPG" alt="link和角色卡"></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>冒险岛</tag>
      </tags>
  </entry>
  <entry>
    <title>js之Data对象使用</title>
    <url>/2022/02/08/js%E4%B9%8BData%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date对象是 JavaScript 原生的时间库。它以国际标准时间（UTC）1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）</span><br></pre></td></tr></table></figure>

<h2 id="普通函数用法"><a href="#普通函数用法" class="headerlink" title="普通函数用法"></a>普通函数用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个代表当前时间的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>()); <span class="comment">// Wed Feb 09 2022 15:38:52 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">// 即使带了参数也是返回当前时间, 参数个数没有影响</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)); <span class="comment">// Wed Feb 09 2022 15:40:11 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h2 id="构造函数用法"><a href="#构造函数用法" class="headerlink" title="构造函数用法"></a>构造函数用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前的UTC时间</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 2022-02-09T07:35:37.335Z</span></span><br><span class="line"><span class="comment">// 时间戳转为字符串格式</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>); <span class="comment">// 1970-01-01T00:00:00.000Z</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1644394635720</span>); <span class="comment">// 2022-02-09T08:17:15.720Z</span></span><br><span class="line"><span class="comment">// 时间戳为负数则代表1970之前的时间</span></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(-<span class="number">1644394635720</span>); <span class="comment">// 1917-11-22T15:42:44.280Z </span></span><br><span class="line"><span class="comment">// 当前时间转化为时间戳（单位：ms）</span></span><br><span class="line"><span class="keyword">let</span> now1 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 1644394635720</span></span><br><span class="line"><span class="comment">// 指定字符串格式的时间转换为时间戳</span></span><br><span class="line"><span class="keyword">let</span> now2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022-02-09T07:35:37.335Z&#x27;</span>).getTime(); <span class="comment">// 1644392137335</span></span><br></pre></td></tr></table></figure>

<p><strong>只要能被Date.parse()解析就可以当成字符串传入new Date()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2022-02-08T16:00:00.000Z</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022-2-9&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022/2/9&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2/9/2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2022-FEB-9&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;FEB, 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;FEB 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;February, 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;February 9, 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;9 Feb 2022&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;9, February, 2022&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>new Date()多个参数</strong></p>
<blockquote>
<p><code>new Date(year, month, date, hours, minutes, seconds, ms)</code><br>使用当前时区中的给定组件创建日期。只有<code>前两个参数是必须的</code>。<br>也就是说年和月是必须的，最少两个参数，否则被识别为时间戳了。<br>$ new Date(2022) // 1970-01-01T00:00:02.022Z<br>$ new Date(2022, 2) // 2022-02-28T16:00:00.000Z<br>year 必须是四位数：2013 是合法的，98 是不合法的。<br>month 计数从 0（一月）开始，到 11（十二月）结束。<br>date 是当月的具体某一天，如果缺失，则为默认值 1。<br>如果 hours/minutes/seconds/ms 缺失，则均为默认值 0。</p>
</blockquote>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p><strong>Date.parse()</strong></p>
<blockquote>
<p><code>Date.parse()</code>方法用来解析日期字符串，返回该时间距离时间零点（1970年1月1日 00:00:00）的毫秒数.<br>日期字符串应该符合 RFC 2822 和 ISO 8061 这两个标准，即<code>YYYY-MM-DDTHH:mm:ss.sssZ</code>格式，其中最后的Z表示时区。</p>
</blockquote>
<p><strong>Date.now()</strong></p>
<blockquote>
<p><code>Date.now</code>方法返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数，相当于 Unix 时间戳乘以1000。<br>$ console.log(Date.now()); // 1644399418450</p>
</blockquote>
<p><strong>Date.UTC()</strong></p>
<blockquote>
<p><code>Date.UTC</code>方法接受年、月、日等变量作为参数，返回该时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数。<br>// 格式<br>Date.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])<br>// 用法<br>Date.UTC(2011, 0, 1, 2, 3, 4, 567)<br>// 1293847384567</p>
</blockquote>
]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔1</title>
    <url>/2022/03/14/%E9%9A%8F%E7%AC%941/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鸽子落在我肩上的时候你笑了一下</span><br><span class="line">用我贫乏的词汇来形容一下</span><br><span class="line">苍白</span><br><span class="line">且</span><br><span class="line">沧桑。</span><br><span class="line"></span><br><span class="line">看见鲜血头颅的时候你拉了我一把</span><br><span class="line">我以为你在寻求保护</span><br><span class="line">回头的一瞬间一把刀擦过我的脸</span><br><span class="line">看到你惨白的脸色我只觉得兴奋</span><br><span class="line">枯老的心开始躁动难安。</span><br><span class="line"></span><br><span class="line">我带着白骨皑皑抵达城下</span><br><span class="line">你穿着我亲手打下的野兽披风</span><br><span class="line">依偎在怀里很柔弱也很动人</span><br><span class="line">迎风而立可能有些冷</span><br><span class="line">你的眉头一直没有舒展开过</span><br><span class="line">我凝视着你</span><br><span class="line">在他怀里的你。</span><br><span class="line"></span><br><span class="line">你带我目睹王城破</span><br><span class="line">看王者堕落</span><br><span class="line">又教我前尘如险索</span><br><span class="line">凡事有因果。</span><br><span class="line"></span><br><span class="line">而我几经地狱火</span><br><span class="line">看尽人事周折</span><br><span class="line">王权亦在握</span><br><span class="line">也未求得</span><br><span class="line">你爱我。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>终产者</title>
    <url>/2022/03/21/%E7%BB%88%E4%BA%A7%E8%80%85/</url>
    <content><![CDATA[<p><strong>“终产者”一词来源于中国科幻作家刘慈欣的小说《赡养人类》。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在文中刘慈欣设想了一个叫“第一地球”的外星世界：星球上的贫富分化已经到了可怕的地步，一名巨富拥有该星球的一切，这个人被称作“终产者”，星球变成了由一个富人和数十亿穷人组成的世界。终产者的私人财产包括整个星球以及它的大气层及海洋，为了保护自己的私人财产将其他所有穷人都撵出了第一地球。</span><br></pre></td></tr></table></figure>

<h4 id="小说概述"><a href="#小说概述" class="headerlink" title="小说概述"></a>小说概述</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一地球与第四地球（现主世界）曾经有过类似的时代：社会财富的分配虽然不匀，但维持着某种平衡，穷人和富人都不是太多，人们普遍相信，随着社会的进步，贫富差距将进一步减小，他们憧憬着人人均富的大同时代，但这种平衡很快就被打破了。</span><br><span class="line">由于高等教育费用日益昂贵，上大学已渐成精英子女的特权，但这毕竟还算是有限度的。终于有一天，教育突然发生了根本的变化，一个技术飞跃出现了:人的大脑中会被植入一台超级计算机，它的容量远大于人脑本身，它存贮的知识可变为植入者的清晰记忆。但这只是它的一个次要功能，它是一个智力放大器，可将人的思维提升到一个新的层次。这时，知识、智力、深刻的思想，甚至完美的心理和性格、艺术审美能力等等，都成了商品，都可以买得到——超等教育时代来到了。</span><br><span class="line">未来一个人接受超等教育的费用极其昂贵，与在北京或上海的黄金地段买两个三套150平米的商品房相当。只是一小部分有产阶层能支付得起。完成超等教育的人的智力比普通人高出一个层次，他们与未接受超等教育的人之间的智力差异，就像人与蚂蚁之间的差异一样大。</span><br><span class="line">同样的差异还表现在许多方面，比如艺术感受能力等。于是，这些超级知识分子阶层就形成了自己的文化，而其余的人对这种文化则完全不理解。超级知识分子可能精通上百种语言，在超级知识分子阶层看来，他们与普通民众的交流，就像我们与动物交流一样简陋。于是，一件事就自然而然地发生了:富人和穷人已经不是同一个物种，就像人和蚂蚁不是同一个物种一样。</span><br><span class="line">维持社会财富平衡、限制穷人数量的因素已经完全荡然无存。对穷人的同情，关键在于一个同字，当双方相同的物种基础不存在时，同情也就不存在了。这是人类的第二次进化，第一次与猿分开来，靠的是自然选择；这一次与穷人分开来，靠的是另一条同样神圣的法则：私有财产不可侵犯。</span><br><span class="line">这项法则由一个叫社会机器的系统维持。社会机器是一种强有力的执法系统，它的执法单元遍布世界的每一个角落，有的执法单元只有蚊子大小，但足以在瞬间同时击毙上百人。它们不遵循阿西莫夫的三定律，而是第一地球的宪法基本原则：私有财产不可侵犯。</span><br><span class="line">虽然的执法是绝对公正的，并非倾向于有产阶层，如果穷人那点儿可怜的财产受到威胁，他们也会根据宪法去保护。但在社会机器强有力的保护下，第一地球的财富不断地向少数人集中。而技术发展导致了另一件事，有产阶层不再需要无产阶层了，机器已经不需要人来操作了，高效率的机器人可以做一切事情，无产阶层连出卖劳动力的机会都没有了。这种情况的出现，大大加快了社会财富向少数人集中的速度。</span><br><span class="line">最终，第一地球变成了由一个富人和二十亿个穷人组成的世界。99%的世界财富掌握在那个富人的手中，这个人被称做终产者。这时，私有财产不可侵犯的宪法仍然有效，社会机器仍在忠实地履行着它的职责，保护着那一个富人的私有财产。</span><br><span class="line">终产者拥有整个第一地球，这个行星上所有的大陆和海洋都是他家的客厅和庭院，甚至第一地球的大气层都是他私人的财产。穷人们住在全封闭的带有自给自足的微型生态循环系统的住宅中受折磨，只能呼吸家庭生态循环系统提供的污浊的空气，喝经千万次循环过滤的水，吃以排泄物为原料合成再生的难以下咽的食物。外界水、空气和土壤等资源只要一旦无偿拿取就会被执法机器击毙。</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过了一段时间，二十亿穷人家生态循环系统恶化崩溃，无法生存。孤注一掷地跑出各自住宅。等待执法机器的处决。</span><br><span class="line">但终产者阻止了机器将众人蒸发，他用执法单元传话给大家，声称自己是个受过多次超等教育的有教养的人，对家里的客人，哪怕是违法闯入者，都是讲礼貌的。但自己也是个喜欢安静和独处的人，为了保护私有财产需要大家离开。他为二十亿人准备了两万艘巨型宇宙飞船，每艘都有一座中等城市大小，能以光速的百分之一航行。这些飞船有足够容纳所有人的生命冷藏舱，足够支持五万年。</span><br><span class="line">送走二十亿穷人前，终产者还提到自己从一个经营妇女卫生用品的小公司起家，一直做到今天的规模，完全是凭借自己的商业才能，没有做过任何违法的事。</span><br><span class="line">穷人们为了到达第四地球，航程延续了三万年，在漫长的星际流浪中，损失了近一半的飞船，只剩下十亿人。他们当中的一名普通的社会调查员在第四地球的一个垃圾场将他们与终产者的故事告诉了第四地球的一个杀手滑膛。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小说</category>
      </categories>
      <tags>
        <tag>赡养人类</tag>
      </tags>
  </entry>
</search>
